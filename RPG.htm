<!DOCTYPE html>
<html>
<head>
<title>Ye Old Role-Playing Board Game</title>
<style>
        body {
            background: black;    
            color: #00FF00;    
            margin: 5px;
            padding: 5px;
            font-family: 'Courier New', Courier, monospace; /* Standardized font for body */
        }
        #controls {
            margin-bottom: 10px;
            padding-left: 10px;
        }
        #dice-result {
            margin-left: 10px;
            color: #FFD700;
        }
        #gameContainer {
            display: flex;
            width: 100vw;
            height: calc(100vh - 20px);
            box-sizing: border-box;
        }
#gameBoard {
    width: 70vw;
    height: 100%;
    position: relative;
    background: black; 
    background-repeat: no-repeat;
    background-size: contain; 
    background-position: left
}
        #statsPanel {
            width: 30vw; /* Explicitly set to 30% of viewport width */
            height: 100%;
            padding: 10px;
            margin-left: 10px;
            overflow-x: auto;
            overflow-y: auto;
            white-space: nowrap;
            background: inherit;
            color: white;
        }
		
		        .stat-row {
            margin-bottom: 5px;
        }
        .stat-row.selected {
            background-color: #444; /* Highlight selected row */
        }
        .hp-zero {
            color: red; /* Red color for name when HP <= 0 */
        }
        .piece {
            position: absolute;
            cursor: grab;
            user-select: none;
            width: 100px;
            height: 100px;
        }
        .piece:active {
            cursor: grabbing;
        }
        .piece.selected {
            outline: 2px solid #FF0000;
            outline-offset: 2px;
        }
        .piece-name {
            font-size: 12px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 50px;
            color: #FFD700;
        }
        .rotate-btn {
            cursor: pointer;
            font-size: 12px;
            color: #FFD700;
        }
        .stat-row {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
            padding: 5px 0;
        }
        .stat-row > * {
            margin-right: 5px;
        }
        .stat-row span {
            color: white;
        }
        .stat-row input {
            background: black;
            color: #00FF00;
            border: none; /* Remove border */
            box-shadow: none; /* Ensure no shadow */
            font-family: 'Courier New', Courier, monospace; /* Use consistent font */
        }
        .stat-row.selected {
            background: cyan;
            color: white;
        }
        .stat-row.selected span {
            color: green;
        }
        .stat-row.selected input {
            background: cyan;
            color: Green;
        }
        .action-btn {
            cursor: pointer;
            margin-left: 5px;
            color: white;
            font-size: 16px;
        }
        .action-btn:hover {
            color: #FF0000;
        }
        button, input[type="file"] {
            background: #FFD700;
            color: #000;
            padding: 5px 10px;
            cursor: pointer;
            margin-left: 10px;
            border: none; /* Remove border */
            box-shadow: none; /* Ensure no shadow */
        }
        button:hover, input[type="file"]:hover {
            background: #FF0000;
            color: #FFF;
        }
        /* General link style */
        a {
            text-decoration: none; /* No default underline */
            color: #FFD700; /* Gold to match your theme */
            font-weight: normal; /* Normal weight to fit the terminal vibe */
            position: relative; /* For the underline effect */
            transition: color 0.3s ease; /* Smooth color transition */
            padding: 2px 4px; /* Slight padding for clickability */
        }
        /* Animated underline effect */
        a::after {
            content: '';
            position: absolute;
            width: 0;
            height: 1px; /* Thinner underline for subtlety */
            bottom: 0;
            left: 0; /* Start from left */
            background: #FF0000; /* Red to match your hover states */
            transition: width 0.3s ease; /* Smooth expansion */
        }
        /* Hover state */
        a:hover {
            color: #FF0000; /* Red to tie into your hover theme */
        }
        a:hover::after {
            width: 100%; /* Full width underline */
        }
        /* Active state (when clicked) */
        a:active {
            opacity: 0.6; /* Slightly more pronounced fade */
            color: #FF0000; /* Stays red when clicked */
        }
        /* Visited state */
        a:visited {
            color: #FFD700; /* Stays gold after visiting */
            opacity: 0.8; /* Slightly faded to differentiate */
        }
</style>
</head>
<body>
<div id="controls">
<button onclick="addPiece()">Add Character/Monster</button>
<input type="file" accept="image/*" onchange="uploadMap(this)">
<input type="text" id="diceFormula1" placeholder="e.g., 2d4-2 or 1d20+2" style="width: 150px;" onfocus="this.select()" onblur="rollDice('diceFormula1', 'dice-result1')">
<span id="dice-result1"></span>
<input type="text" id="diceFormula2" placeholder="e.g., 1d3+0 or 1d20+2" style="width: 150px;" onfocus="this.select()" onblur="rollDice('diceFormula2', 'dice-result2')">
<span id="dice-result2"></span>
<input type="text" id="diceFormula3" placeholder="e.g., 1d100-1 or 1d20+2" style="width: 150px;" onfocus="this.select()" onblur="rollDice('diceFormula3', 'dice-result3')">
<span id="dice-result3"></span>
<input type="text" id="diceFormula4" placeholder="e.g., 1d2+0 or 1d20+2" style="width: 150px;" onfocus="this.select()" onblur="rollDice('diceFormula4', 'dice-result4')">
<span id="dice-result4"></span>
<button onclick="rollInitiative()">Roll Initiative</button> <!-- Added button -->
</div>
<br><a href="https://archive.org/details/tsr02011advanceddungeonsdragonsadd1steddungeonmastersguide/page/n75/mode/1up" target=_blank>Combat Tables</a>(..the attacker's HD versus the target's AC. There are character class tables and a monster table.)	
<br><a href="https://archive.org/details/tsr09045addthesecretofbonehill/page/n46/mode/1up" target=_blank>The Secret of Bone Hill Adventure Module</a>	
<div id="gameContainer">
<div id="gameBoard"></div>
<div id="statsPanel"></div>
</div>

<script>

function rollInitiative() {
    pieces.forEach(piece => {
        piece.initiative = Math.floor(Math.random() * 6) + 1; // Roll 1d6
    });

    pieces.sort((a, b) => b.initiative - a.initiative); // Sort by initiative (highest first)
    updateStatsPanel(); // Update the stats panel to show the new order
}

let pieces = JSON.parse(localStorage.getItem('gamePieces')) || [];
let pieceId = pieces.length > 0 ? Math.max(...pieces.map(p => p.id)) + 1 : 0;
let selectedPieceId = null;
let mapImage = localStorage.getItem('mapImage') || 'DND/Maps/Map1.jpg'; // Default map

if (!localStorage.getItem('mapImage')) {
localStorage.setItem('mapImage', mapImage);
}
document.getElementById('gameBoard').style.backgroundImage = `url(${mapImage})`;

function saveToLocalStorage() {
localStorage.setItem('gamePieces', JSON.stringify(pieces));
}

        function rollDice(inputId, outputId) {
            const inputElement = document.getElementById(inputId);
            const outputElement = document.getElementById(outputId);
            
            if (!inputElement || !outputElement) {
                console.error("Input or output element not found!");
                return;
            }

            const input = inputElement.value.trim();
            const regex = /^(\d+)d(\d+)([+-]\d+)?$/; // Matches 'XdY+Z' or 'XdY-Z'
            const match = input.match(regex);

            if (!match) {
                outputElement.textContent = "Invalid format! Use 'XdY+Z' or 'XdY-Z' (e.g., 2d4-2 or 1d20+2)";
                return;
            }

            const count = parseInt(match[1], 10);  // Number of dice
            const sides = parseInt(match[2], 10);  // Sides per die
            const modifier = match[3] ? parseInt(match[3], 10) : 0; // Modifier, defaults to 0

            // Validate inputs
            if (count <= 0 || sides <= 0) {
                outputElement.textContent = "Number of dice and sides must be positive!";
                return;
            }
            if (count > 100) {
                outputElement.textContent = "Too many dice! Maximum is 100.";
                return;
            }

            // Roll the dice
            let rolls = [];
            let total = 0;

            for (let i = 0; i < count; i++) {
                const roll = Math.floor(Math.random() * sides) + 1;
                rolls.push(roll);
                total += roll;
            }

            total += modifier;

            // Format the output
            const modifierStr = modifier >= 0 ? `+${modifier}` : `${modifier}`;
            const rollsStr = rolls.join(' + ');
            const output = modifier === 0 
                ? `${count} ${sides}-sided dice: ${rollsStr} = ${total}`
                : `${count} ${sides}-sided dice with ${modifierStr}: ${rollsStr} ${modifierStr} = ${total}`;

            outputElement.textContent = output;
        }

function createPieceElement(piece) {
const div = document.createElement('div');
div.className = 'piece';
div.id = `piece-${piece.id}`;
div.style.left = `${piece.x}px`;
div.style.top = `${piece.y}px`;
div.style.transform = `rotate(${piece.rotation * 45}deg)`;

const img = document.createElement('img');
img.id = `img-${piece.id}`;
img.src = piece.image || '/DND/Miniatures/Miniature1.png'; // Default miniature
img.width = 100;
img.height = 100;

const name = document.createElement('div');
name.id = `name-display-${piece.id}`;
name.className = 'piece-name';
name.textContent = piece.name;

const rotateBtn = document.createElement('span');
rotateBtn.className = 'rotate-btn';
rotateBtn.textContent = '↻';
rotateBtn.onclick = (e) => { e.stopPropagation(); rotatePiece(piece.id); };

div.appendChild(img);
div.appendChild(name);
div.appendChild(rotateBtn);

makeDraggable(div);
div.addEventListener('click', (e) => {
if (e.target === div || e.target === img || e.target === name) {
selectPiece(piece.id);
}
});

return div;
}

function updateStatsPanel() {
const panel = document.getElementById('statsPanel');
panel.innerHTML = pieces.map(piece => `
<div class="stat-row ${selectedPieceId === piece.id ? 'selected' : ''}" id="row-${piece.id}">
<span>Name:</span>
<input type="text" id="name-${piece.id}" value="${piece.name}"                            onchange="updateStat(${piece.id}, 'name', this.value)" 
                           style="width: 80px; ${piece.hp <= 0 ? 'color: red;' : ''}"
                           class="${piece.hp <= 0 ? 'hp-zero' : ''}">
<span>HD:</span>
<input type="text" id="hd-${piece.id}" value="${piece.hd}" onchange="updateStat(${piece.id}, 'hd', this.value)" style="width: 40px">
<span>HP:</span>
<input type="number" id="hp-${piece.id}" value="${piece.hp}" onchange="updateStat(${piece.id}, 'hp', this.value)" style="width: 40px">
<span>AC:</span>
<input type="text" id="ac-${piece.id}" value="${piece.ac}" onchange="updateStat(${piece.id}, 'ac', this.value)" style="width: 40px">
<span>ATKS:</span>
<input type="text" id="attacks-${piece.id}" value="${piece.attacks}" onchange="updateStat(${piece.id}, 'attacks', this.value)" style="width: 50px">
<span>MV:</span>
<input type="text" id="mv-${piece.id}" value="${piece.mv}" onchange="updateStat(${piece.id}, 'mv', this.value)" style="width: 40px">
<span>Equipment:</span>
<input type="text" id="gear-${piece.id}" value="${piece.gear}" onchange="updateStat(${piece.id}, 'gear', this.value)" style="width: 80px">
<input type="file" id="file-${piece.id}" accept="image/*" onchange="uploadImage(${piece.id}, this)">
<span class="action-btn" onclick="copyPiece(${piece.id})">📋</span>
<span class="action-btn" onclick="deletePiece(${piece.id})">🗑️</span>
</div>
</div>
`).join('');
}

        function updateStat(id, key, value) {
            const piece = pieces.find(p => p.id === id);
            if (piece) {
                if (key === 'hp') {
                    piece[key] = parseInt(value, 10) || 0; // Ensure HP is a number
                } else {
                    piece[key] = value;
                }
                updateStatsPanel(); // Re-render to reflect changes, including HP color
            }
        }

        // Initial render
        updateStatsPanel();

function addPiece() {
const newPiece = {
id: pieceId++,
x: 0,
y: 0,
rotation: 0,
name: 'New Character',
hd: 1,
hp: 10,
ac: 10,
mv: 6,
attacks: '1d6+0',
gear: 'weapon, armor',
image: 'DND/Miniatures/Miniature1.jpg' // Default miniature
};
pieces.push(newPiece);
const element = createPieceElement(newPiece);
document.getElementById('gameBoard').appendChild(element);
saveToLocalStorage();
updateStatsPanel();
}

function selectPiece(id) {
if (selectedPieceId !== null) {
document.getElementById(`piece-${selectedPieceId}`).classList.remove('selected');
document.getElementById(`row-${selectedPieceId}`).classList.remove('selected');
}
selectedPieceId = id;
document.getElementById(`piece-${id}`).classList.add('selected');
document.getElementById(`row-${id}`).classList.add('selected');
}

function updateStat(id, key, value) {
const piece = pieces.find(p => p.id === id);
if (piece) {
piece[key] = value;
if (key === 'name') {
document.getElementById(`name-display-${id}`).textContent = value;
}
saveToLocalStorage();
updateStatsPanel();
}
}

function uploadImage(id, input) {
const file = input.files[0];
if (file) {
const reader = new FileReader();
reader.onload = (e) => {
const piece = pieces.find(p => p.id === id);
piece.image = e.target.result;
document.getElementById(`img-${id}`).src = piece.image;
saveToLocalStorage();
};
reader.readAsDataURL(file);
}
}

function uploadMap(input) {
const file = input.files[0];
if (file) {
const reader = new FileReader();
reader.onload = (e) => {
mapImage = e.target.result;
localStorage.setItem('mapImage', mapImage);
document.getElementById('gameBoard').style.backgroundImage = `url(${mapImage})`;
};
reader.readAsDataURL(file);
}
}

function rotatePiece(id) {
const piece = pieces.find(p => p.id === id);
piece.rotation = (piece.rotation + 1) % 8;
document.getElementById(`piece-${id}`).style.transform = `rotate(${piece.rotation * 45}deg)`;
saveToLocalStorage();
}

function copyPiece(id) {
const piece = pieces.find(p => p.id === id);
const newPiece = { ...piece, id: pieceId++, x: piece.x + 50, y: piece.y };
pieces.push(newPiece);
const element = createPieceElement(newPiece);
document.getElementById('gameBoard').appendChild(element);
saveToLocalStorage();
updateStatsPanel();
}

function deletePiece(id) {
pieces = pieces.filter(p => p.id !== id);
const element = document.getElementById(`piece-${id}`);
if (element) element.remove();
if (selectedPieceId === id) selectedPieceId = null;
saveToLocalStorage();
updateStatsPanel();
}

function makeDraggable(element) {
let isDragging = false;
let posX = 0, posY = 0, startX = 0, startY = 0;

element.addEventListener('mousedown', startDragging);
element.addEventListener('touchstart', startDragging, { passive: false });

function startDragging(e) {
if (e.target.className === 'rotate-btn') return;

e.preventDefault();
isDragging = true;

if (e.type === 'touchstart') {
startX = e.touches[0].clientX;
startY = e.touches[0].clientY;
} else {
startX = e.clientX;
startY = e.clientY;
}

posX = element.offsetLeft;
posY = element.offsetTop;

document.addEventListener('mousemove', dragElement);
document.addEventListener('mouseup', stopDragging);
document.addEventListener('touchmove', dragElement, { passive: false });
document.addEventListener('touchend', stopDragging);
}

function dragElement(e) {
if (!isDragging) return;
e.preventDefault();

let clientX, clientY;
if (e.type === 'touchmove') {
clientX = e.touches[0].clientX;
clientY = e.touches[0].clientY;
} else {
clientX = e.clientX;
clientY = e.clientY;
}

let newX = posX + (clientX - startX);
let newY = posY + (clientY - startY);

newX = Math.round(newX / 50) * 50;
newY = Math.round(newY / 50) * 50;

newX = Math.max(0, Math.min(newX, Math.floor(window.innerWidth * 0.7) - 50));
newY = Math.max(0, Math.min(newY, Math.floor(window.innerHeight) - 70 - 20));

element.style.left = `${newX}px`;
element.style.top = `${newY}px`;

const id = parseInt(element.id.split('-')[1]);
const piece = pieces.find(p => p.id === id);
piece.x = newX;
piece.y = newY;
}

function stopDragging() {
if (isDragging) {
isDragging = false;
saveToLocalStorage();
}
document.removeEventListener('mousemove', dragElement);
document.removeEventListener('mouseup', stopDragging);
document.removeEventListener('touchmove', dragElement);
document.removeEventListener('touchend', stopDragging);
}
}

// Load existing pieces
pieces.forEach(piece => {
const element = createPieceElement(piece);
document.getElementById('gameBoard').appendChild(element);
});
updateStatsPanel();
</script>
</body>
</html>
