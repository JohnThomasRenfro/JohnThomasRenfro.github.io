<!DOCTYPE html>
<html>
<head>
<title>Ye Old Role-Playing Board Game</title>
<style>
body {
border: none;    
margin: 0;
padding: 10px 0;
background: black;
color: green;
font-family: 'Courier New', Courier, monospace;
}
#controls {
margin-bottom: 10px;
padding-left: 10px;
}
#dice-result {
margin-left: 10px;
color: #FFD700;
}
#gameContainer {
display: flex;
width: 100vw;
height: calc(100vh - 20px);
box-sizing: border-box;
}
#gameBoard {
width: 70vw;
height: 100%;
position: relative;
background: #f0f0f0;
background-size: cover;
background-position: center;
background-repeat: no-repeat;
}
#statsPanel {
background: inherit;
color: green;    
width: 30vw;
height: 100%;
padding: 10px;
margin-left: 10px;
overflow-x: auto;
overflow-y: auto;
white-space: nowrap;
}
.piece {
position: absolute;
cursor: grab;
user-select: none;
-moz-user-select: none;
-webkit-user-select: none;
touch-action: none;
width: 50px;
height: 70px;
}
.piece:active {
cursor: grabbing;
}
.piece.selected {
outline: 2px solid #FF0000;
outline-offset: 2px;
}
.piece-name {
font-size: 12px;
white-space: nowrap;
overflow: hidden;
text-overflow: ellipsis;
max-width: 50px;
color: #FFD700;
}
.rotate-btn {
cursor: pointer;
font-size: 12px;
color: #FFD700;
}
.stat-row {
display: flex;
align-items: center;
margin-bottom: 5px;
padding: 5px 0;
}
.stat-row > * {
margin-right: 5px;
}
.stat-row span {
color: #FFD700;
}
.stat-row input {
background: black;
color: green;
font-family: 'Courier New', Courier, monospace;
}
.stat-row.selected {
background: cyan;
color: green;
}
.stat-row.selected span {
color: white;
}
.stat-row.selected input {
background: cyan;
color: black;
}
.action-btn {
cursor: pointer;
margin-left: 5px;
color: #FFD700;
font-size: 16px;
}
.action-btn:hover {
color: #FF0000;
}
button, input[type="file"] {
background: #FFD700;
color: #000;
padding: 5px 10px;
font-family: 'Courier New', Courier, monospace;
cursor: pointer;
margin-left: 10px;
}
button:hover, input[type="file"]:hover {
background: #FF0000;
color: #FFF;
a {
    text-decoration: none; /* Remove default underline */
    color: #1e90ff; /* Bright blue */
    font-family: Arial, sans-serif;
    font-weight: 500; /* Medium bold */
    position: relative; /* For the underline effect */
    transition: color 0.3s ease; /* Smooth color change */
    padding-bottom: 2px; /* Space for underline */
}

/* General link style */
a {
    text-decoration: none; /* No default underline */
    color: #FFD700; /* Gold to match your theme */
    font-family: 'Courier New', Courier, monospace; /* Matches your font */
    font-weight: normal; /* Normal weight to fit the terminal vibe */
    position: relative; /* For the underline effect */
    transition: color 0.3s ease; /* Smooth color transition */
    padding: 2px 4px; /* Slight padding for clickability */
}

/* Animated underline effect */
a::after {
    content: '';
    position: absolute;
    width: 0;
    height: 1px; /* Thinner underline for subtlety */
    bottom: 0;
    left: 0; /* Start from left */
    background: #FF0000; /* Red to match your hover states */
    transition: width 0.3s ease; /* Smooth expansion */
}

/* Hover state */
a:hover {
    color: #FF0000; /* Red to tie into your hover theme */
}

a:hover::after {
    width: 100%; /* Full width underline */
}

/* Active state (when clicked) */
a:active {
    opacity: 0.6; /* Slightly more pronounced fade */
    color: #FF0000; /* Stays red when clicked */
}

/* Visited state */
a:visited {
    color: #FFD700; /* Stays gold after visiting */
    opacity: 0.8; /* Slightly faded to differentiate */
}
</style>
</head>
<body>
<div id="controls">
<button onclick="addPiece()">Add Character/Monster</button>
<input type="file" accept="image/*" onchange="uploadMap(this)">
<button onclick="rollDice(20, parseInt(document.getElementById('mod20').value))">1d20</button>
<input type="number" id="mod20" value="0" style="width: 50px;">

<button onclick="rollDice(12, parseInt(document.getElementById('mod12').value))">1d12</button>
<input type="number" id="mod12" value="0" style="width: 50px;">

<button onclick="rollDice(10, parseInt(document.getElementById('mod10').value))">1d10</button>
<input type="number" id="mod10" value="0" style="width: 50px;">

<button onclick="rollDice(8, parseInt(document.getElementById('mod8').value))">1d8</button>
<input type="number" id="mod8" value="0" style="width: 50px;">

<button onclick="rollDice(6, parseInt(document.getElementById('mod6').value))">1d6</button>
<input type="number" id="mod6" value="0" style="width: 50px;">

<button onclick="rollDice(4, parseInt(document.getElementById('mod4').value))">1d4</button>
<input type="number" id="mod4" value="0" style="width: 50px;">

<span id="dice-result"></span> <a href='https://archive.org/details/tsr02011advanceddungeonsdragonsadd1steddungeonmastersguide/page/n74/mode/1up' target='_blank'>Combat Tables</a>
||
<span id="dice-result"></span> <a href='https://archive.org/details/tsr09045addthesecretofbonehill/page/n30/mode/1up' target='_blank'>The Secret of Bone Hill</a>

</div>
<div id="gameContainer">
<div id="gameBoard"></div>
<div id="statsPanel"></div>
</div>

<script>
let pieces = JSON.parse(localStorage.getItem('gamePieces')) || [];
let pieceId = pieces.length > 0 ? Math.max(...pieces.map(p => p.id)) + 1 : 0;
let selectedPieceId = null;
let mapImage = localStorage.getItem('mapImage') || 'DND/Maps/Map1.png'; // Default map

if (!localStorage.getItem('mapImage')) {
localStorage.setItem('mapImage', mapImage);
}
document.getElementById('gameBoard').style.backgroundImage = `url(${mapImage})`;

function saveToLocalStorage() {
localStorage.setItem('gamePieces', JSON.stringify(pieces));
}

function rollDice(sides, modifier) {
    const roll = Math.floor(Math.random() * sides) + 1;
    const total = roll + modifier;
    document.getElementById('dice-result').textContent = `Rolled 1d${sides}${modifier >= 0 ? '+' : ''}${modifier}: ${roll} + ${modifier} = ${total}`;
}

function createPieceElement(piece) {
const div = document.createElement('div');
div.className = 'piece';
div.id = `piece-${piece.id}`;
div.style.left = `${piece.x}px`;
div.style.top = `${piece.y}px`;
div.style.transform = `rotate(${piece.rotation * 45}deg)`;

const img = document.createElement('img');
img.id = `img-${piece.id}`;
img.src = piece.image || '/DND/Miniatures/Miniature1.png'; // Default miniature
img.width = 50;
img.height = 50;

const name = document.createElement('div');
name.id = `name-display-${piece.id}`;
name.className = 'piece-name';
name.textContent = piece.name;

const rotateBtn = document.createElement('span');
rotateBtn.className = 'rotate-btn';
rotateBtn.textContent = '‚Üª';
rotateBtn.onclick = (e) => { e.stopPropagation(); rotatePiece(piece.id); };

div.appendChild(img);
div.appendChild(name);
div.appendChild(rotateBtn);

makeDraggable(div);
div.addEventListener('click', (e) => {
if (e.target === div || e.target === img || e.target === name) {
selectPiece(piece.id);
}
});

return div;
}

function updateStatsPanel() {
const panel = document.getElementById('statsPanel');
panel.innerHTML = pieces.map(piece => `
<div class="stat-row ${selectedPieceId === piece.id ? 'selected' : ''}" id="row-${piece.id}">
<span>Name:</span>
<input type="text" id="name-${piece.id}" value="${piece.name}" onchange="updateStat(${piece.id}, 'name', this.value)" style="width: 80px">
<span>HD:</span>
<input type="text" id="hd-${piece.id}" value="${piece.hd}" onchange="updateStat(${piece.id}, 'hd', this.value)" style="width: 40px">
<span>HP:</span>
<input type="number" id="hp-${piece.id}" value="${piece.hp}" onchange="updateStat(${piece.id}, 'hp', this.value)" style="width: 40px">
<span>AC:</span>
<input type="text" id="ac-${piece.id}" value="${piece.ac}" onchange="updateStat(${piece.id}, 'ac', this.value)" style="width: 40px">
<span>ATKS:</span>
<input type="text" id="attacks-${piece.id}" value="${piece.attacks}" onchange="updateStat(${piece.id}, 'attacks', this.value)" style="width: 50px">
<span>MV:</span>
<input type="text" id="mv-${piece.id}" value="${piece.mv}" onchange="updateStat(${piece.id}, 'mv', this.value)" style="width: 40px">
<span class="action-btn" onclick="copyPiece(${piece.id})">üìã</span>
<span class="action-btn" onclick="deletePiece(${piece.id})">üóëÔ∏è</span>
<span>Equipment:</span>
<input type="text" id="gear-${piece.id}" value="${piece.gear}" onchange="updateStat(${piece.id}, 'gear', this.value)" style="width: 80px">
<input type="file" id="file-${piece.id}" accept="image/*" onchange="uploadImage(${piece.id}, this)">
</div>
`).join('');
}

function addPiece() {
const newPiece = {
id: pieceId++,
x: 0,
y: 0,
rotation: 0,
name: 'New Character',
hd: 1,
hp: 10,
ac: 10,
mv: 6,
attacks: '1d6+0',
gear: 'weapon, armor',
image: 'DND/Miniatures/Miniature1.png' // Default miniature
};
pieces.push(newPiece);
const element = createPieceElement(newPiece);
document.getElementById('gameBoard').appendChild(element);
saveToLocalStorage();
updateStatsPanel();
}

function selectPiece(id) {
if (selectedPieceId !== null) {
document.getElementById(`piece-${selectedPieceId}`).classList.remove('selected');
document.getElementById(`row-${selectedPieceId}`).classList.remove('selected');
}
selectedPieceId = id;
document.getElementById(`piece-${id}`).classList.add('selected');
document.getElementById(`row-${id}`).classList.add('selected');
}

function updateStat(id, key, value) {
const piece = pieces.find(p => p.id === id);
if (piece) {
piece[key] = value;
if (key === 'name') {
document.getElementById(`name-display-${id}`).textContent = value;
}
saveToLocalStorage();
updateStatsPanel();
}
}

function uploadImage(id, input) {
const file = input.files[0];
if (file) {
const reader = new FileReader();
reader.onload = (e) => {
const piece = pieces.find(p => p.id === id);
piece.image = e.target.result;
document.getElementById(`img-${id}`).src = piece.image;
saveToLocalStorage();
};
reader.readAsDataURL(file);
}
}

function uploadMap(input) {
const file = input.files[0];
if (file) {
const reader = new FileReader();
reader.onload = (e) => {
mapImage = e.target.result;
localStorage.setItem('mapImage', mapImage);
document.getElementById('gameBoard').style.backgroundImage = `url(${mapImage})`;
};
reader.readAsDataURL(file);
}
}

function rotatePiece(id) {
const piece = pieces.find(p => p.id === id);
piece.rotation = (piece.rotation + 1) % 8;
document.getElementById(`piece-${id}`).style.transform = `rotate(${piece.rotation * 45}deg)`;
saveToLocalStorage();
}

function copyPiece(id) {
const piece = pieces.find(p => p.id === id);
const newPiece = { ...piece, id: pieceId++, x: piece.x + 50, y: piece.y };
pieces.push(newPiece);
const element = createPieceElement(newPiece);
document.getElementById('gameBoard').appendChild(element);
saveToLocalStorage();
updateStatsPanel();
}

function deletePiece(id) {
pieces = pieces.filter(p => p.id !== id);
const element = document.getElementById(`piece-${id}`);
if (element) element.remove();
if (selectedPieceId === id) selectedPieceId = null;
saveToLocalStorage();
updateStatsPanel();
}

function makeDraggable(element) {
let isDragging = false;
let posX = 0, posY = 0, startX = 0, startY = 0;

element.addEventListener('mousedown', startDragging);
element.addEventListener('touchstart', startDragging, { passive: false });

function startDragging(e) {
if (e.target.className === 'rotate-btn') return;

e.preventDefault();
isDragging = true;

if (e.type === 'touchstart') {
startX = e.touches[0].clientX;
startY = e.touches[0].clientY;
} else {
startX = e.clientX;
startY = e.clientY;
}

posX = element.offsetLeft;
posY = element.offsetTop;

document.addEventListener('mousemove', dragElement);
document.addEventListener('mouseup', stopDragging);
document.addEventListener('touchmove', dragElement, { passive: false });
document.addEventListener('touchend', stopDragging);
}

function dragElement(e) {
if (!isDragging) return;
e.preventDefault();

let clientX, clientY;
if (e.type === 'touchmove') {
clientX = e.touches[0].clientX;
clientY = e.touches[0].clientY;
} else {
clientX = e.clientX;
clientY = e.clientY;
}

let newX = posX + (clientX - startX);
let newY = posY + (clientY - startY);

newX = Math.round(newX / 50) * 50;
newY = Math.round(newY / 50) * 50;

newX = Math.max(0, Math.min(newX, Math.floor(window.innerWidth * 0.7) - 50));
newY = Math.max(0, Math.min(newY, Math.floor(window.innerHeight) - 70 - 20));

element.style.left = `${newX}px`;
element.style.top = `${newY}px`;

const id = parseInt(element.id.split('-')[1]);
const piece = pieces.find(p => p.id === id);
piece.x = newX;
piece.y = newY;
}

function stopDragging() {
if (isDragging) {
isDragging = false;
saveToLocalStorage();
}
document.removeEventListener('mousemove', dragElement);
document.removeEventListener('mouseup', stopDragging);
document.removeEventListener('touchmove', dragElement);
document.removeEventListener('touchend', stopDragging);
}
}

// Load existing pieces
pieces.forEach(piece => {
const element = createPieceElement(piece);
document.getElementById('gameBoard').appendChild(element);
});
updateStatsPanel();
</script>
</body>
</html>
