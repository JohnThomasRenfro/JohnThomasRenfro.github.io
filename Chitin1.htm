<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chitin - Microgame</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
        }
        .grid {
            display: grid;
            grid-template-columns: repeat(10, 30px);
            grid-gap: 2px;
            margin: 20px auto;
            border: 2px solid #000;
        }
        .cell {
            width: 30px;
            height: 30px;
            background-color: lightgray;
            border: 1px solid #ccc;
            cursor: pointer;
        }
        .player1 {
            background-color: green;
        }
        .player2 {
            background-color: red;
        }
        .turn {
            margin-top: 20px;
            font-size: 20px;
        }
        .scoreboard {
            margin-top: 20px;
        }
        .pieces {
            display: flex;
            justify-content: center;
            margin: 10px;
        }
        .piece {
            width: 30px;
            height: 30px;
            margin: 5px;
            cursor: grab;
        }
        .player1Piece {
            background-color: green;
        }
        .player2Piece {
            background-color: red;
        }
    </style>
</head>
<body>
    <h1>Chitin - Microgame</h1>
    <div class="pieces">
        <div id="player1Piece" class="piece player1Piece" draggable="true"></div>
        <div id="player2Piece" class="piece player2Piece" draggable="true"></div>
    </div>
    <div class="grid" id="gameGrid"></div>
    <div class="turn" id="turnIndicator">Player 1's Turn</div>
    <div class="scoreboard">
        <p>Player 1 Score: <span id="score1">0</span></p>
        <p>Player 2 Score: <span id="score2">0</span></p>
    </div>

    <script>
        // Game settings
        const gridSize = 10;  // 10x10 grid
        let currentPlayer = 1;  // Player 1 starts
        let player1Score = 0;
        let player2Score = 0;
        let board = [];

        // Initialize the game grid
        const grid = document.getElementById('gameGrid');
        const turnIndicator = document.getElementById('turnIndicator');
        const score1 = document.getElementById('score1');
        const score2 = document.getElementById('score2');

        // Function to initialize the board
        function initializeBoard() {
            board = [];
            for (let row = 0; row < gridSize; row++) {
                let rowArr = [];
                for (let col = 0; col < gridSize; col++) {
                    rowArr.push(null);
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    cell.setAttribute('data-row', row);
                    cell.setAttribute('data-col', col);
                    cell.addEventListener('dragover', (e) => e.preventDefault());  // Allow drop
                    cell.addEventListener('drop', (e) => cellDropped(e, row, col));
                    grid.appendChild(cell);
                }
                board.push(rowArr);
            }
        }

        // Handle the drag start event (for pieces)
        function handleDragStart(e) {
            e.dataTransfer.setData('piece', e.target.id);
        }

        // Handle the drop event on a cell
        function cellDropped(e, row, col) {
            e.preventDefault();

            // Only place a piece if the cell is empty
            if (board[row][col] !== null) {
                alert('This cell is already occupied!');
                return;
            }

            // Get the dragged piece
            const pieceId = e.dataTransfer.getData('piece');
            const pieceElement = document.getElementById(pieceId);

            // Place the current player's piece on the board
            board[row][col] = currentPlayer;
            const cell = grid.children[row * gridSize + col];

            if (currentPlayer === 1) {
                cell.classList.add('player1');
            } else {
                cell.classList.add('player2');
            }

            // Change the turn
            currentPlayer = currentPlayer === 1 ? 2 : 1;
            turnIndicator.textContent = `Player ${currentPlayer}'s Turn`;

            // Check for scoring
            if (checkForScore(row, col)) {
                if (currentPlayer === 1) {
                    player1Score++;
                    score1.textContent = player1Score;
                } else {
                    player2Score++;
                    score2.textContent = player2Score;
                }
            }
        }

        // Check if the current move scores points
        function checkForScore(row, col) {
            const directions = [
                { r: -1, c: 0 },  // Up
                { r: 1, c: 0 },   // Down
                { r: 0, c: -1 },  // Left
                { r: 0, c: 1 }    // Right
            ];

            let score = 0;
            directions.forEach(direction => {
                const newRow = row + direction.r;
                const newCol = col + direction.c;

                if (newRow >= 0 && newRow < gridSize && newCol >= 0 && newCol < gridSize) {
                    if (board[newRow][newCol] === currentPlayer) {
                        score++;
                    }
                }
            });

            return score > 0;
        }

        // Enable drag for the initial pieces (player 1 and player 2)
        const player1Piece = document.getElementById('player1Piece');
        const player2Piece = document.getElementById('player2Piece');

        player1Piece.addEventListener('dragstart', handleDragStart);
        player2Piece.addEventListener('dragstart', handleDragStart);

        // Initialize the board
        initializeBoard();
    </script>
</body>
</html>
