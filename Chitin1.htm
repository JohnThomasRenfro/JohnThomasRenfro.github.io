<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chitin1 Game</title>
  <style>
    /* style.css */
    body {
      font-family: Arial, sans-serif;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      background-color: #f5f5f5;
    }

    #game {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    #pieces {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
    }

    .piece {
      width: 50px;
      height: 50px;
      background-color: #007bff;
      border-radius: 8px;
      cursor: grab;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(5, 100px);
      grid-template-rows: repeat(5, 100px);
      gap: 5px;
      background-color: #f1f1f1;
      padding: 10px;
      border-radius: 8px;
    }

    .board div {
      width: 100px;
      height: 100px;
      background-color: #e0e0e0;
      border: 1px solid #ccc;
      position: relative;
      overflow: hidden;
      cursor: pointer;
    }

    .piece.rotated {
      transform: rotate(90deg);
    }

    .piece.rotated90 {
      transform: rotate(180deg);
    }

    .piece.rotated180 {
      transform: rotate(270deg);
    }

    .piece.rotated270 {
      transform: rotate(360deg);
    }
  </style>
</head>
<body>
  <div id="game">
    <div id="pieces">
      <div class="piece" draggable="true" data-piece="piece1"></div>
      <div class="piece" draggable="true" data-piece="piece2"></div>
    </div>
    
    <div id="board" class="board">
      <!-- Dynamically created squares will go here -->
    </div>
  </div>

  <script>
    // script.js

    // Define the board and piece containers
    const board = document.getElementById("board");
    const pieces = document.querySelectorAll(".piece");

    // Create a 5x5 grid of squares for the board
    const createBoard = () => {
      for (let i = 0; i < 25; i++) {
        const square = document.createElement("div");
        board.appendChild(square);
      }
    };

    // Handle drag start for the pieces
    pieces.forEach(piece => {
      piece.addEventListener("dragstart", (e) => {
        e.dataTransfer.setData("piece", e.target.dataset.piece);
      });
    });

    // Handle drop on the board
    board.addEventListener("dragover", (e) => {
      e.preventDefault();
    });

    board.addEventListener("drop", (e) => {
      e.preventDefault();
      const pieceType = e.dataTransfer.getData("piece");
      const square = e.target;

      if (square && square !== board) {
        // Create a new piece on the square (duplicate the dragged piece)
        const newPiece = document.createElement("div");
        newPiece.classList.add("piece");
        newPiece.dataset.piece = pieceType;
        newPiece.style.backgroundColor = pieceType === "piece1" ? "#007bff" : "#28a745";
        newPiece.style.position = "absolute";
        newPiece.style.top = "50%";
        newPiece.style.left = "50%";
        newPiece.style.transform = "translate(-50%, -50%)";

        // Add the new piece to the square
        square.appendChild(newPiece);

        // Make the new piece draggable
        newPiece.setAttribute("draggable", "true");

        // Enable rotation on click
        newPiece.addEventListener("click", () => {
          if (newPiece.classList.contains("rotated")) {
            newPiece.classList.remove("rotated");
            newPiece.classList.add("rotated90");
          } else if (newPiece.classList.contains("rotated90")) {
            newPiece.classList.remove("rotated90");
            newPiece.classList.add("rotated180");
          } else if (newPiece.classList.contains("rotated180")) {
            newPiece.classList.remove("rotated180");
            newPiece.classList.add("rotated270");
          } else {
            newPiece.classList.add("rotated");
          }
        });

        // Handle the new piece's drag start
        newPiece.addEventListener("dragstart", (e) => {
          e.dataTransfer.setData("piece", newPiece.dataset.piece);
        });

        // Handle moving pieces by dragging them
        newPiece.addEventListener("dragend", (e) => {
          const draggedPiece = e.target;
          const position = draggedPiece.getBoundingClientRect();
          const square = document.elementFromPoint(e.clientX, e.clientY);

          if (square && square !== board && square !== draggedPiece.parentElement) {
            square.appendChild(draggedPiece);
            draggedPiece.style.position = "absolute";
            draggedPiece.style.top = "50%";
            draggedPiece.style.left = "50%";
            draggedPiece.style.transform = "translate(-50%, -50%)";
          }
        });
      }
    });

    // Initialize the board with squares
    createBoard();
  </script>
</body>
</html>



